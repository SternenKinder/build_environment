import glob
import sys
import os
import config
import string
import SCons

Import( '*')

# Environment must be explicitly created from PATH since scons would not find the
# compiler / linker anymore, and must be initialized with the right target platform
envOptions = {}
envOptions[ "ENV" ] = { 'PATH' : os.environ['PATH'] }
if platform == 'x86':
	envOptions[ "TARGET_ARCH"] = 'x86'
elif platform == 'x64':
	envOptions[ "TARGET_ARCH"] = 'x86_64'
# currently nothing for android

opts.Add( 'FORCE_MSVC_VERSION', 'Forces scons to use a certain MS Visual Studio Version', 'false' )
if opts['FORCE_MSVC_VERSION'] != 'false' :
	print "Forcing MS Visual Studio Version to " + opts[ 'FORCE_MSVC_VERSION' ]
	envOptions[ "MSVC_VERSION" ] = opts[ 'FORCE_MSVC_VERSION' ]

envOptions[ "MSVS_USE_MFC_DIRS" ] = 1 # needed by drivers that use COM	


masterEnv = Environment( **envOptions )

# append custom builder to the environment that allows creating a file
masterEnv.Append( BUILDERS = { 'CreateFile': create_bld, 'Test': test_bld } )


# setup of build enviroment for microsoft windows

masterEnv['ENV']['TMP'] = os.environ['TMP']

	
# settings for microsoft c++
masterEnv.Append( CCFLAGS = [ '/EHsc','/c', '/W3', '/GR', '/wd4355', '/wd4996', '/wd4251', '/wd4275', '/wd4819', '/wd4290' ] )
masterEnv.Append( CPPDEFINES = [ 'WIN32', '_MBCS', '_WIN32_WINNT=0x501' ] )
masterEnv.Append( LINKFLAGS = [ '/SUBSYSTEM:CONSOLE' ] )
if platform == 'x86':
	masterEnv.Append( LINKFLAGS = [ '/MACHINE:X86' ] )
else:
	masterEnv.Append( CPPDEFINES = [ 'WIN64' ] )
#	masterEnv.Append( LINKFLAGS = [ '/MACHINE:X64' ] )

if configuration == 'release':
	masterEnv.Append( CCFLAGS = [ '/O2', '/MD' ] )
	masterEnv.Append( CPPDEFINES = [ 'NDEBUG' ] )
	masterEnv.Append( variant = 'Release' )
else:
	masterEnv.Append( CCFLAGS = [ '/Od', '/RTC1', '/MDd', '/Z7' ] )
	masterEnv.Append( CPPDEFINES = [ '_DEBUG' ] )
	# incremental builds won't work anyways, so turning it off explicitly should save the time and space for trying
	masterEnv.Append( LINKFLAGS = [ '/DEBUG', '/INCREMENTAL:NO' ] ) 
	masterEnv.Append( variant = 'Debug' )

# embed manifest files into exe and dll files
if masterEnv.get( 'MSVS_VERSION', '6.0' )  >= '8.0':
	masterEnv[ 'LINKCOM' ] = [ masterEnv[ 'LINKCOM' ], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;1' ]
	masterEnv[ 'SHLINKCOM' ] = [ masterEnv[ 'SHLINKCOM' ], 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2' ]

# create a global list of visual studio projects in the top level directory to be merged with the solution file
# it would be nicer if there was a scons command to get a list of all .vcproj nodes created in this directory
if 'vcproj' in COMMAND_LINE_TARGETS:
	msvsTopDirProjects = []
	Export( 'msvsTopDirProjects' )
		
# export auxilliary functions
Export( 'masterEnv' )

install_prefix = Dir( './../' ).abspath

installDir = ''
if platform == 'x64':
	installDir = opts['INSTALL_DIR_X64']
	install_library_prefix = os.path.join ( install_prefix , 'lib' )
else:
	installDir = opts['INSTALL_DIR_X86']
	install_library_prefix = os.path.join ( install_prefix , 'lib32' )
install_binary_prefix = os.path.join ( install_prefix , installDir )
install_component_prefix = os.path.join ( install_binary_prefix , 'ubitrack' )
install_include_prefix = os.path.join ( install_prefix , 'include' )
install_document_prefix = os.path.join ( install_prefix , 'doc' )
			
Export( [ 'install_prefix', 'install_library_prefix', 'install_binary_prefix', 'install_component_prefix', 'install_document_prefix', 'install_include_prefix'] )
