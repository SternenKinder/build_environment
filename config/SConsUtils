import glob
import sys
import os
import config
import string
import SCons

# returns the current path of the SConcsript and ignores variant directories
def getCurrentPath ( ):
	return Dir( '.' ).srcnode().abspath

# auxilliary function for globbing relative paths in source directories
def globDirectories( pattern ):
	srcdir = getCurrentPath() + '/'
	# glob and strip absolute path
	onlyDirectories = filter ( lambda f: os.path.isdir( f ) , glob.glob( srcdir + pattern ) )
	return map( lambda d : d[ len( srcdir ) : ], onlyDirectories ) 

# auxilliary function for globbing relative paths in source directories
def globSourceFiles( pattern ):
	srcdir = getCurrentPath() + '/'
	# glob and strip absolute path
	return map( lambda d : d[ len( srcdir ) : ], glob.glob( srcdir + pattern ) ) 	

# auxilliary function that flattens a list and converts paths
def pathListToStringList( l ):
	def toString( d ):
		if isinstance( d, SCons.Node.Node ):
			return d.get_abspath()
		elif str( d ).startswith( '#' ):
			return Dir( d ).abspath
		else:
			return str( d )
	return Flatten( map( toString, l ) )

# aux function to convert a list of paths to a list of paths relative to the top-level directory
def toTopLevelPath( l ):	
	return map( lambda x: File( x ).srcnode().path, l )
	
# aux function to merge dictionaries consisting of lists
def mergeOptions( *all ):
	r = {}
	for opts in all:
		for key in opts.keys():
			if key in r:
				r[ key ] += opts[ key ]
			else:
				r[ key ] = opts[ key ][:]
	return r
	
# aux function that installs the *.lib and *.dll in according folders
def installLibs( env, prefix_bin, prefix_lib, files, dllOnly = False ):
	if sys.platform == "win32":		
		fileListDll = filter( lambda x: x.path.endswith( ".dll" ), files )
		fileListLib = filter( lambda x: x.path.endswith( ".lib" ), files )			
		r = env.Install( prefix_bin, fileListDll )		
		if not dllOnly:			
			r += env.Install( prefix_lib, fileListLib )
		return r
	else:		
		fileListDll = filter( lambda x: x.path.endswith( ".so" ), files )
		fileListLib = filter( lambda x: x.path.endswith( ".a" ), files )			
		r = env.Install( prefix_bin, fileListDll )		
		if not dllOnly:			
			r += env.Install( prefix_lib, fileListLib )
		return r

#		return env.Install( prefix_lib, files )

# define a builder that creates files from strings
# the content must be given as "source = Value( '...' )"
def createFile( target, source, env ):
	f = open( str( target[ 0 ] ), 'w' )
	f.write( source[ 0 ].get_contents() )

create_bld = Builder( action = createFile )	

# define a builder to run tests (adapted from http://www.scons.org/wiki/UnitTests)
# Note: target is the name of a file that is created when the test runs sucessfully
def builder_unit_test( target, source, env ):
	# add path variable to os environment
	e = os.environ
	if 'LIBPATH' in env.Dictionary():
		pathstrings =  map( lambda x: str( x ), env[ 'LIBPATH' ] )
		if sys.platform == 'win32':
			e[ 'PATH' ] = os.pathsep.join( pathstrings ) + os.pathsep + e[ 'PATH' ]
		else:
			if 'LD_LIBRARY_PATH' in e: 
				e[ 'LD_LIBRARY_PATH' ] = os.pathsep.join( pathstrings ) + os.pathsep + e[ 'LD_LIBRARY_PATH' ]
			else:
				e[ 'LD_LIBRARY_PATH' ] = os.pathsep.join( pathstrings )

	# run test
	app = str( source[ 0 ].abspath )
	args = [ app ]
	if 'ARGS' in env.Dictionary():
		args += env[ 'ARGS' ]
	if os.spawnve( os.P_WAIT, app, args, e ) == 0:
		open( str( target[ 0 ] ), 'w' ).write( "PASSED\n" )
	else:
		return 1

test_bld = Builder( action = builder_unit_test )	
		
# export auxilliary functions
Export( 'globSourceFiles', 'globDirectories', 'pathListToStringList', 'toTopLevelPath', 'mergeOptions', 'installLibs', 'test_bld', 'create_bld', 'getCurrentPath')